import streamlit as st
from chatbot_engine import ChatbotEngine, MODEL_NAME_GEMINI
import warnings

# --- Custom CSS ---
def local_css():
    st.markdown("""
    <style>
    .stApp {
        background-color: #f8f9fa;
    }
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .chat-message {
        padding: 1.5rem;
        border-radius: 0.8rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }
    .user-message {
        background: #e6f3ff;
        border-left: 5px solid #2196F3;
    }
    .bot-message {
        background: #f0f0f0;
        border-left: 5px solid #4CAF50;
    }
    .chat-header {
        color: #1E3A8A;
        font-weight: 600;
    }
    .sidebar-content {
        padding: 1rem;
        background-color: #f0f7ff;
        border-radius: 0.5rem;
    }
    </style>
    """, unsafe_allow_html=True)

# --- Page Configuration ---
st.set_page_config(
    page_title="E-commerce Chatbot",
    page_icon="üõí",
    layout="wide",
    initial_sidebar_state="expanded"
)

local_css()

# --- Hide warnings ---
warnings.filterwarnings(
    "ignore",
    message="Convert_system_message_to_human will be deprecated!",
    category=UserWarning,
    module="langchain_google_genai"
)

# --- App Header ---
col1, col2 = st.columns([1, 6])
with col1:
    st.image("https://img.icons8.com/color/96/000000/shopping-cart--v2.png", width=80)
with col2:
    st.title("Chatbot H·ªó tr·ª£ Kh√°ch h√†ng E-commerce")
    st.caption(f"ƒê∆∞·ª£c cung c·∫•p b·ªüi Google Gemini ({MODEL_NAME_GEMINI}) v√† LangChain")

# --- Chatbot Engine Initialization ---
@st.cache_resource
def load_chatbot_engine():
    """T·∫£i v√† cache ChatbotEngine."""
    print("ƒêang kh·ªüi t·∫°o ChatbotEngine cho ·ª©ng d·ª•ng Streamlit...")
    try:
        engine = ChatbotEngine()
        print("ChatbotEngine ƒë√£ s·∫µn s√†ng trong Streamlit.")
        return engine
    except ValueError as ve:
        st.error(f"L·ªói c·∫•u h√¨nh API: {ve}. Vui l√≤ng ki·ªÉm tra file .env v√† API key c·ªßa Google.")
        return None
    except Exception as e:
        st.error(f"L·ªói kh√¥ng mong mu·ªën khi kh·ªüi t·∫°o ChatbotEngine: {e}")
        return None

chatbot_engine = load_chatbot_engine()

# --- Chat History Management ---
if "messages" not in st.session_state:
    st.session_state.messages = []

# --- Welcome card ---
if not st.session_state.messages:
    st.info("""
    ### üëã Ch√†o m·ª´ng b·∫°n!
    
    T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa c·ª≠a h√†ng. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
    - T√¨m ki·∫øm s·∫£n ph·∫©m
    - Tr·∫£ l·ªùi v·ªÅ quy tr√¨nh ƒë·∫∑t h√†ng
    - Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ v·∫≠n chuy·ªÉn
    - H∆∞·ªõng d·∫´n ch√≠nh s√°ch ƒë·ªïi tr·∫£
    
    H√£y nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v√†o √¥ chat b√™n d∆∞·ªõi.
    """)

# --- Display chat history ---
chat_container = st.container()
with chat_container:
    for message in st.session_state.messages:
        if message["role"] == "user":
            with st.chat_message("user", avatar="üë§"):
                st.markdown(f"<div class='chat-message user-message'>{message['content']}</div>", unsafe_allow_html=True)
        else:
            with st.chat_message("assistant", avatar="ü§ñ"):
                st.markdown(f"<div class='chat-message bot-message'>{message['content']}</div>", unsafe_allow_html=True)

# --- User Input Processing ---
user_query = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ·ªü ƒë√¢y...")

if user_query and chatbot_engine:
    # Add user message to history and display
    st.session_state.messages.append({"role": "user", "content": user_query})
    with st.chat_message("user", avatar="üë§"):
        st.markdown(f"<div class='chat-message user-message'>{user_query}</div>", unsafe_allow_html=True)

    # Get response from chatbot
    with st.spinner("Bot ƒëang suy nghƒ©... ü§î"):
        try:
            bot_response = chatbot_engine.ask(user_query)
        except Exception as e:
            bot_response = f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi t√¥i c·ªë g·∫Øng tr·∫£ l·ªùi b·∫°n: {e}"
            st.error(bot_response)

    # Add bot response to history and display
    st.session_state.messages.append({"role": "assistant", "content": bot_response})
    with st.chat_message("assistant", avatar="ü§ñ"):
        st.markdown(f"<div class='chat-message bot-message'>{bot_response}</div>", unsafe_allow_html=True)

elif user_query and not chatbot_engine:
    st.error("Chatbot engine ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra l·ªói ·ªü tr√™n v√† th·ª≠ l√†m m·ªõi trang.")

# --- Sidebar Configuration ---
with st.sidebar:
    st.markdown("<h3 class='chat-header'>C√¥ng c·ª• & Th√¥ng tin</h3>", unsafe_allow_html=True)
    
    st.markdown("<div class='sidebar-content'>", unsafe_allow_html=True)
    st.markdown("### V·ªÅ Chatbot n√†y")
    st.info(
        "Chatbot n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi ph·ªï bi·∫øn v·ªÅ n·ªÅn t·∫£ng e-commerce c·ªßa ch√∫ng t√¥i. "
        "S·ª≠ d·ª•ng m√¥ h√¨nh ng√¥n ng·ªØ l·ªõn v√† k·ªπ thu·∫≠t Retrieval Augmented Generation (RAG) "
        "ƒë·ªÉ cung c·∫•p th√¥ng tin ch√≠nh x√°c t·ª´ c∆° s·ªü ki·∫øn th·ª©c."
    )
    st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown("<div class='sidebar-content'>", unsafe_allow_html=True)
    st.markdown("### Tr·∫°ng th√°i h·ªá th·ªëng")
    if chatbot_engine and chatbot_engine.vector_store:
        st.success("‚úÖ Vector Store ƒë√£ ƒë∆∞·ª£c t·∫£i!")
    else:
        st.warning("‚ö†Ô∏è Vector Store ch∆∞a s·∫µn s√†ng.")
    st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown("<div class='sidebar-content'>", unsafe_allow_html=True)
    st.markdown("### Qu·∫£n l√Ω cu·ªôc tr√≤ chuy·ªán")
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat", use_container_width=True):
        st.session_state.messages = []
        st.rerun()
    st.markdown("</div>", unsafe_allow_html=True)